{
	"info": {
		"_postman_id": "3f34be95-3c4c-4660-b7cd-704cf7232a83",
		"name": "emailService",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36785755",
		"_collection_link": "https://projeto-catlogo-de-eventos.postman.co/workspace/Cat%25C3%25A1logo-de-eventos~cbf513f9-9747-45cf-a397-52cda2cab29c/collection/36785755-3f34be95-3c4c-4660-b7cd-704cf7232a83?action=share&source=collection_link&creator=36785755"
	},
	"item": [
		{
			"name": "Envio de Recovery Code",
			"item": [
				{
					"name": "Enviar recovery code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.environment.set(\"recoveryCode\", pm.response.json().recoveryCode)\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"lucasm241301@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{email_service_url}}/send-recovery-code",
							"host": [
								"{{email_service_url}}"
							],
							"path": [
								"send-recovery-code"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enviar recovery code para email invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Email deve ser um email válido\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"lucasm241301@.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{email_service_url}}/send-recovery-code",
							"host": [
								"{{email_service_url}}"
							],
							"path": [
								"send-recovery-code"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enviar recovery code para email não cadastrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"lucasm@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{email_service_url}}/send-recovery-code",
							"host": [
								"{{email_service_url}}"
							],
							"path": [
								"send-recovery-code"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enviar recovery code  sem passar o email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Email é obrigatório\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{email_service_url}}/send-recovery-code",
							"host": [
								"{{email_service_url}}"
							],
							"path": [
								"send-recovery-code"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Validação de Recovery Code",
			"item": [
				{
					"name": "Validar Recovery Code com código invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Senha atualizada com sucesso\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userEmail\": \"lucasm241301@gmail.com\",\r\n    \"recoveryCode\": \"220Sdz\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{email_service_url}}/validate-recovery-code",
							"host": [
								"{{email_service_url}}"
							],
							"path": [
								"validate-recovery-code"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar Recovery Code com email invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Email deve ser um email válido\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userEmail\": \"lucasm2413il.com\",\r\n    \"recoveryCode\": \"F8Eiyo\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{email_service_url}}/validate-recovery-code",
							"host": [
								"{{email_service_url}}"
							],
							"path": [
								"validate-recovery-code"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar Recovery Code sem passar email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Email é obrigatório\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"recoveryCode\": \"220Sdz\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{email_service_url}}/validate-recovery-code",
							"host": [
								"{{email_service_url}}"
							],
							"path": [
								"validate-recovery-code"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar Recovery Code com código valido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Código de recuperação válido\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userEmail\": \"lucasm241301@gmail.com\",\r\n    \"recoveryCode\": \"FhgawK\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{email_service_url}}/validate-recovery-code",
							"host": [
								"{{email_service_url}}"
							],
							"path": [
								"validate-recovery-code"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar Recovery Code sem passar código",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Senha atualizada com sucesso\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userEmail\": \"lucasm241301@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{email_service_url}}/validate-recovery-code",
							"host": [
								"{{email_service_url}}"
							],
							"path": [
								"validate-recovery-code"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}